var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"TexasHoldem","category":"page"},{"location":"api/#TexasHoldem","page":"API","title":"TexasHoldem","text":"TexasHoldem\n\nA no-limit Texas Holdem simulator.\n\nTerminology\n\ngame a single \"game\", where players are dealt hands, winner(s) are declared once.\nstage a point or process in the game, including PreFlop, Flop, Turn, River.\nround the process of each player deciding which actions to take, until no further actions are taking.\n\n\n\n\n\n","category":"module"},{"location":"api/#Game-level-functions","page":"API","title":"Game-level functions","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"TexasHoldem.move_buttons!\nTexasHoldem.play!\nTexasHoldem.tournament!","category":"page"},{"location":"api/#TexasHoldem.move_buttons!","page":"API","title":"TexasHoldem.move_buttons!","text":"move_buttons!(table::Table)\n\nMove the dealer, small blind, big blind, and first-to-act buttons to the next set of players.\n\n\n\n\n\n","category":"function"},{"location":"api/#TexasHoldem.play!","page":"API","title":"TexasHoldem.play!","text":"play!(game::Game)\n\nPlay a hand.\n\n\n\n\n\n","category":"function"},{"location":"api/#TexasHoldem.tournament!","page":"API","title":"TexasHoldem.tournament!","text":"tournament!(game::Game)\n\nPlay until a single player remains!\n\n\n\n\n\n","category":"function"},{"location":"api/#Player-actions","page":"API","title":"Player actions","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"TexasHoldem.Action\nTexasHoldem.Check\nTexasHoldem.Fold\nTexasHoldem.Call\nTexasHoldem.call_amount\nTexasHoldem.Raise\nTexasHoldem.AllIn\nTexasHoldem.valid_raise_range","category":"page"},{"location":"api/#TexasHoldem.Action","page":"API","title":"TexasHoldem.Action","text":"Action\n\nAn action type, to be returned by player_option during each players turn to act. This is an internal type, but documented for user understanding.\n\nUsers are expected to return an action from player_option by calling one of Action's convenience methods:\n\nFold\nCheck\nCall\nRaise\nAllIn\n\n\n\n\n\n","category":"type"},{"location":"api/#TexasHoldem.Check","page":"API","title":"TexasHoldem.Check","text":"Check()\n\nThe check action, to be returned from player_option, when a player wants to check.\n\n\n\n\n\n","category":"function"},{"location":"api/#TexasHoldem.Fold","page":"API","title":"TexasHoldem.Fold","text":"Fold()\n\nThe fold action, to be returned from player_option, when a player wants to fold.\n\n\n\n\n\n","category":"function"},{"location":"api/#TexasHoldem.Call","page":"API","title":"TexasHoldem.Call","text":"Call(amt::Int)\nCall(table::Table, player::Player)\n\nThe call action, should be returned from player_option. when a player wants to call amount amt.\n\nUse call_amount to query how much is needed to call.\n\n\n\n\n\n","category":"function"},{"location":"api/#TexasHoldem.call_amount","page":"API","title":"TexasHoldem.call_amount","text":"call_amount(table::Table, player::Player)\n\nReturn the amount to call inside player_option.\n\n\n\n\n\n","category":"function"},{"location":"api/#TexasHoldem.Raise","page":"API","title":"TexasHoldem.Raise","text":"Raise(amt::Int)\n\nThe raise action, should be returned from player_option. when a player wants to raise to amount amt.\n\nUse valid_raise_range to query the valid range that they are allowed to raise.\n\n\n\n\n\n","category":"function"},{"location":"api/#TexasHoldem.AllIn","page":"API","title":"TexasHoldem.AllIn","text":"AllIn(amt::Int)\nAllIn(table::Table, player::Player)\n\nThe call action, should be returned from player_option. when a player wants to raise to amount amt.\n\nWhen AllIn is a player's only raise option, valid_raise_range will return a unit range of br:br, which is the player's appropriate (i.e., allowable) all-in bet.\n\nFor example, if players A and B have 150 and 100 bank rolls respectively, and player B bets 100, then player A's all-in raise amount would be 50 (on-top of the 100 call). This number is determined automatically.\n\nSo, users may simply use AllIn(table, player), which enters last(valid_raise_range(table, player)) as the amount.\n\n\n\n\n\n","category":"function"},{"location":"api/#TexasHoldem.valid_raise_range","page":"API","title":"TexasHoldem.valid_raise_range","text":"valid_raise_range(table::Table, player::Player)\n\nA UnitRange{Int} of valid raises. Note that sometimes the range is n:n when all-in is the only available option.\n\nSee valid_raise_range_simple in the test suite for a more verbose but simpler implementation.\n\n\n\n\n\n","category":"function"},{"location":"api/#Player-options","page":"API","title":"Player options","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"TexasHoldem.player_option","category":"page"},{"location":"api/#TexasHoldem.player_option","page":"API","title":"TexasHoldem.player_option","text":"player_option(game::Game, player::Player, option::AbstractPlayerOptions)\n\nReturns a valid action (see Action), given the possible option. TexasHoldem calls player_option for each player on the table during each round. This function is entirely where the strategy logic resides.\n\nCheckRaiseFold\nCallRaiseFold\nCallAllInFold\nCallFold\n\n\n\n\n\n","category":"function"},{"location":"#TexasHoldem.jl","page":"Home","title":"TexasHoldem.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"An experimental package for simulating no-limit Texas Holdem Poker.","category":"page"},{"location":"perf/#Performance","page":"Performance","title":"Performance","text":"","category":"section"},{"location":"perf/","page":"Performance","title":"Performance","text":"Here is a benchmark showcasing the performance of TexasHoldem:","category":"page"},{"location":"perf/","page":"Performance","title":"Performance","text":"import TexasHoldem as TH\nusing TexasHoldem\nusing BenchmarkTools\nimport Logging\nimport Random\nRandom.seed!(1234)\n\nplayers() = ntuple(i->(Player(Bot5050(), i)), 4)\n\nfunction do_work!()\n    play!(Game(players();logger=TH.ByPassLogger()))\n    return nothing\nend\n\ntrial = @benchmark do_work!()\nshow(stdout, MIME(\"text/plain\"), trial)","category":"page"}]
}
